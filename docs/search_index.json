[["index.html", "Welcome", " By Camilo Mora, Ph.D. Welcome Welcome to GEOG 380 Statistical Methods. "],["introduction.html", "Introduction", " Introduction Most people gets turn off by statistics; but the reality is that Stats have not only allow human development, but we use stats, without even knowing, for almost every life choice that we make. In theory, Statistics requires some mathematical background, but in practice, stats are simply creating knowledge/information from observations/data. Definition Statistics is the approach by which knowledge is extracted from data. Let me provide an example that I find pretty cool. In the late 1879, just before going into holidays, Louis Pasteur told one of his assistants to inject chickens with a fresh culture of Cholera as part of an experiment to find a vaccine. By the way, thanks to this guy, Pasteur, you have milk for breakfast this morning; he was the one who discovered Pasteurization or the process to sterilize food without damaging its flavors, which allowed to store highly perishable foods for long time. Moving on with the story I presume Pasteurs assistant have a few other things to do that day, or may be he just wanted to go to his holidays; he not only forgot to inoculate the chickens, he left the bacterial culture outside. A month later, upon returning from holidays, the assistant injected the chickens with the old culture, but nothing happened to the chickens. For a moment, put yourself in the position of Pasteur and think what you would have done?. Sad to admit, but I probably would have been upset. I would have interpreted the action as careless, plus what a psychological torture for the poor chickens staring for a month to a lethal doses of bacteria. In addition, and more sadly, I probably would have interpreted the results of nothing happening to the chickens, as simply the bacterial culture got ruined from being outside for so long. I would have restarted the experiment with new chickens and new bacterial cultures. What would you have thought about the result of this failed experiment?. Take a moment to think. Figure 0.1: Pasteur Intriguingly, Pasteur told the assistant to inoculate the chickens again with fresh bacterial cultures and after a while they observed that the chickens got mildly sick but they did not succumb to the deadly bacteria. The chickens were immune to the bacteria. Essentially, Pasteour just made one of the major discoveries of humanity: a vaccine. This discovery came to be called Attenuated Vaccine, in which the virulence of bacteria is reduced by oxygen allowing the body to fight the bug. The method saved millions of chickens, and people as well. The method was used against many other deadly diseases, and put Pasteur in the history books. Nothing is known about what happened to the lab assistant. There are several things that made this case a very successful story. Obviously, Pasteur knew very well what he was doing to get even the smallest of hints from what most other people would have interpreted as failure, but he was also very methodic and knew his stats very well. He was able to gather knowledge from observations. He applied statistics very well. That is a game-changer example about the use of statistics. But as mentioned earlier, stats are used almost all the time, in almost every decision we made. Even simple things like the clothes that you are wearing right now was a choice you made most likely based on stats. If this morning was cold, you probably choose to wear a jacked. Feeling cold was you taking data that then you use analytically to make the decision to wear a jacket. The aim of this class is to give you basic i) methodological, ii) analytical, and iii) data visualization skills on stats. In a nutshell, I want you to learn how to identify a question, define a protocol to respond it, analyze the data collected, and display your results convincingly. "],["book-data-collection.html", "Book data collection", " Book data collection I have introduced numerous non-belonging letters throughout this book. I cannot tell you much about these letters other than they are where they do not belong. From now on those letters are called tokens. You need to collect those tokens as you move along and create your own database of tokens. Collect such data as meticulously as you can. I have a three motivations with this exercise. Firsts, make you realize the reality of science. At times, data could be clear, and you may find a letter that clearly does not belong where it is. Other times, however, you will wonder if the letter was an error or a token. In real life, nature will not clarify things for you. If the data you collect is not right, it will go to become part of the noise in your data. Second, at the end of this book, you will analyze your data collected in an statistical test. Finally, I want to ensure you read this book with much detail. Good luck with your token hunting. Here is goes your first token: a By the way, please do not stress out over the collection of these tokens, they will come as you move along. "],["what-is-r.html", "What is R?", " What is R? The second goal of this course is for you to become familiar with the use of R; we may use Microsoft Excel sporadically. R is like a Rolls-Royce, the king among softwares; a revolutionary free program that has come to become popular in many disciplines; and there are several reasons for this: Most importantly, it is free. By its nature of being open-source, thousands of people around the world have contributed their work in the form of packages, which has allowed R to increase in scope, being used for almost anything from doing statistical analysis, to figures, to movies, to animations, to videos, you name it. R Packages are like the phone apps that you download and install in your phone and that you use to do a diversity of things. Currently, there are more than 16,000 R-Packages, each providing different tools to do almost anything. There is also a very large group of users willing to help you if you face any struggle. Oh, and they will help you for free, as well. Stackoverflow is a web-page were you can find solutions to any problem you may encourter with R. Onlined platforms such as Stackoverflow have blogs of people helping each other with any issue about R. Every question is nicely cataloged, and at times there may even be alternative solutions to the same problem. The reality is that with so many millions of people using R, chances are that if you have a problem, someone else probably had the same problem before, and thus, their solution most likely is already ready for you in the web. Finally, R can handle the load. In R, you can run codes as small as those run in a calculator to as large as those ones run in super computers. No matter what professional path you take in life, you will have an use for R. "],["do-not-dispair-please.html", "Do not dispair, please", " Do not dispair, please R will be new to most of you. In addition, I have found over the years teaching this class that there is a large disparity among students in their prior exposure to mathematical concepts, let alone coding. So lets be realistic, learning R will be hard initially, but, you can do it. On my part, I have created this online resource of the course as detailed as possible so you can get there by simply following the steps. I also included a comments section at the bottom of each section, so you can communicate any problem to get feedback from everyone. You will not be penalized for asking a question on the forum, but you may get rewarded if you answer it correctly. You will not be penalized for answering wrong. So please lets use that discussion platform. But please be nice when asking and responding questions. If you get frustrated figuring out how to do something, you have two likely paths. One is getting upset, which uses about half of your brain power while the other half is trying to figure out the solution. The other path is to cool down, and have your entire brain power working on solving the problem. Which pathway makes the more sense? Finding solutions to your R problems is a key skill that could save you hours of labor, and we have a dedicated section on how to find answers in the sea of information that is the web. Using Nathaniel Phillips words from his R Bookdown YaRrr! The Pirates Guide to R, R is very much like a relationship. Like relationships, there are two major truths to R programming: There is nothing more frustrating than when your code does not work There is nothing more satisfying than when your code does work! Figure 0.2: R is like a love relationship, from Nathaniel Phillips There will be times, when You will run into error after error and pound your fists against the table screaming: WHY ISNT MY CODE WORKING?!?!? There must be something wrong with this stupid software!!! You will spend hours trying to find a bug in your code, only to find that - frustratingly enough, you had had an extra space or missed a comma somewhere. Taken from Nathaniel Phillips. If you go through a nightmare with R, you are not alone. We all went through that. I have to tell you, it will not go away. The more proficient you become, the more likely you will be to push the boundaries of what is possible and known, so certainly you will have many times in which your codes does not work. Think about Pasteur, at those moments. There will be a steep learning curve, but while you get there keep cool, do not desperate. If you face any roadblock; first, calm down. Then, have Google help you. Please think about this: in the next year or so, hopefully, you will be working at a company and/or doing grad school. At that moment, you really need to have mastered the capacity to solve problems by yourself. Gaining that independence will give you a huge advantage. So it is important for you to figure out what is the best method for you to find solutions to your R problems. Learning how to find solutions to problems in the web will be part of the learning of this class, and later on we will do exercises on this. If after you have done your best looking for a solution to a problem, but failed, then, reach out to me. I will be happy to help you. but I want to know that before hand you did your best to figure out the solution to your problem on your own. Learning R will become increasingly easier over time. As you become more proficient, you will start making more sophisticated things with R. When it comes to doing things, with R, the sky is the limit. R would become nicer to you over time, from Nathaniel Phillips Figure 0.3: R would become nicer to you over time, from Nathaniel Phillips I want to caution, however, that this course requires a good quality time commitment. Note my double intonation on good quality and on time commitment. Please study during times you cannot be distracted. I cannot emphasize enough that spending lots of time studying is not the same as studying well. As codes become longer and more complex, your mind would eventually need to focus to conceptualize the entire code. I can tell you with certainty that it will be much harder, border line impossible, to visualize large codes, if you are to be distracted. Learning R will not be done in one hour before the exam. So take as much time as you can to study. With practice will come perfection. Finally, it is worth mentioning that knowing how to use R is a skill that you want to learn. Of all the classes you will take at the University, this is one you want to put on your CV. Saying that you know R will be a very desirable skill for any job you end up doing. z "],["the-scientific-method.html", "1 The scientific method", " 1 The scientific method Figure 1.1: Knowledge and ignorance The scientific method is an approach by which robust knowledge is acquired. The approach can be applied to diverse situations, not only science. You probably learned about the scientific method in the third or fourth grade, but I like to refresh the general concepts as I commonly see students formulating experiments for which there is not clear question, doing analyzes whose results will not answer the question, etc. Knowing the exact protocol of how to go from question to answer will avoid you wasting time into what I call rabbit holes; basically, a lot of effort put into work that does not help the ultimate goal you proposedd. "],["the-problem.html", "The problem", " The problem The first step in the scientific method is when you observe a problem. However, defining a problem is not as trivial as you may think. There is some complexity to the process between the first time you observed a problem to the time you specifically define the problem you want to solve with the scientific method. Lets use a real case example. Lets assume that you just joined one of the many organizations in Hawaii interested in land restoration. Figure 1.2: Carbon Neutrality Project One of the first observations you will make is that the speed at which we cut down trees is much faster than the speed at which we plant trees. As a matter of fact, in Honolulu, we cut down over 15,000 trees a year, but only about 4,000 thousand trees are planted. Figure 1.3: Invasive Guava forrest in Hawaii A second observation you would likely make is that we are loosing land to many introduced species like guava, halekoa, albizia, several grazes, etc. Those species are very aggressive and are secluding/pushing to the brick native species. With those observations in mind, your first likely question is how do you make the approach of land restoration more efficient? Narrow the problem That simple question of how to make restoration more efficient can take you into tens of different pathways, which again, brings into attention the importance of keeping focus and methodic. Lets assume that you choose to focus on the production of seedlings, as many seedlings die after planting and they are not cheap. Figure 1.4: A few problems with seedling production Search prior knowledge The second step in the scientific method is to find out what has been already done about this problem. You need to collect information to better define what the problem is. Do not start working on the first idea that occurs to you. May be some else thought of your idea already, may be there are better ideas, may be other ideas give you an even better idea. Ultimately, you should not risk getting into a rabbit hole other people already checked for you, or worse off reinventing the wheal. Figure 1.5: Search information Searching for prior knowledge can be done in different ways. You can start with a general Google search. In the example about restoration, you can ask a simple question like why seedling mortality is so high. Ask questions like you will ask to a person. The more specific you get the better. Because most information in the web likely has been collected without using the scientific method, you should be cautious when using such information. The reason to consider the web as a general source of information is that it contains the cumulative experiences of millions of people, which bring me to another source of information, which is gaining from the expertise of other people. Find people working on your problem, and ask the same questions you asked in Google. Upon gathering prior knowledge in the form of experiences via webpages or interviews, you need to scale up the quality of information you search for using Google Scholar. Figure 1.6: Scholar Page Google Scholar is a search engine of scientific publications. There are many other databases you can use to look for papers like PubMed and Jstor, but Scholar alone will likely be enough. Several studies have shown that almost any search in Scholar returns the same papers as searches in more specific databases. Figure 1.7: PDFs in Scholar While those databases may give you the title and summary of the paper (i.e., so call citation), finding the full paper is another deal. When freely available in the web, Google Scholar will provide the PDF of papers in the hyperlink highlighted with the red square in the figure above. If you have an email student account, you can also try to get the PDF via your local library, which link is provided besides each citation in Google Scholar (green square in figure above). These links are only available when you do the search within your universitys network. You can also click on the All versions tab (Highlighted with the red arrow in the image above); commonly there are PDFs there as well. If you are not in a rush, you can click on the citation, which will take you to the web-page of the journal, get the email address of the author and send that person a message asking for the PDF. There is also a web page commonly shared among students called Sci-Hub, which contains PDFs of almost any paper. There is another one that provides books Z-Library. I am not familiar with the legality of these projects, but you should be aware they exists. You can read about Sci-Hub Here, and about Z-Library Here. Again, it is very important that you know your sources of information. And apply common sense, when you use such information. Please do the following exercise: Using the words How many species are there on Earth, do a search in Google and in Google Scholar. Check out the first ten citations on each search. What differences do you see? What are the social implications of these differences? Obviously, after you find the PDFs of papers, you have to read them. Some papers may provide new citations for you to look for. The step of information/literature search should be taken with much seriousness. You really want to be sure you know well what is already known out there; You need to become an expert on whatever is that you want to work on. Having a good understanding of the prior cumulative knowledge will allow you to quickly judge if something is worth working on or not. It will also give you ideas into how to do or not to do things. Pasteur famously said, chance only favours the prepared mind. Given what I told you about him, why do you think it is important, then, to know the literature well? Figure 1.8: An information search is demanding, if done well Back to defining the problem After the non-trivial exercise of looking for prior information, you should probable go back to re-defining what the problem is, being as specific as you can. If you were to actually replicate the example before about forest restoration, you will find that one, among many problems, with seedlings is that you probably want healthy seedlings grown at the nursery to maximize survival after planting. Having seedlings growing fast can also reduce the time they spend in the nursery reducing overhead costs. Tall and healthy seedlings can better cope with the stress after planting, and escape above and below ground competition with weeds. You would probably also found that water and food (in the form of nutrients) is critical to making seedlings grow faster and healthier. If you did a good information search, certainly, you also found out about the importance of soil microbes, specifically Mycorrhizae. Figure 1.9: Mycorrhizae in roots Mycorrhizae is a group of species of fungi that finds home on the roots of trees, creating mutualistic relationships with the tree. They break down organic matter and nitrogen compounds that can be adsorbed faster by the seedling. At this point, it will likely become clear that an obvious question to ask is if this Mycorrhizae has any effect on your seedlings. "],["the-hyphotesis.html", "The hyphotesis", " The hyphotesis Figure 1.10: The hyphotesis =o The third step in the scientific method for solving a problem is to define the hypothesis. Once you have a clear question, and you are relatively certain that no one has asked the question before, or answer it insufficiently, you should move to the next phase of the scientific method, which is to formulate your question more specifically. It could be as simple as: Does Mycorrhizae increase the body size of plants? For the purpose of the scientific method you need to be very specific in what you want to study. See for instance, how the question is explicit about fungi, affecting specifically the body size of plants. There are a few other nuances about formulating a question, that we will talk about when we deal with designing the experiment. You could also reformulate your very specific question in the form of an hypothesis, like: Mycorrhizae has a significant positive effect on the body size of plants You should now note in the hypothesis version of the question that you now include an expectation that the effect will be positive. The other addition in the hypothesis is the word significant, meaning that any effect you find is considerably larger than the effect you would find if you were not to use Mycorrhizae. Mathematically, the hypothesis has to be defined between two alternatives you can choose from: 1) the Null hypothesis and 2) the Alternative hypothesis. The null hypothesis H0 The null hypothesis is denoted by the symbol H0. It commonly represents a statement of no effect, no difference. In the restoration example, H0 is Mycorrhizae has no significant effect on the body size of plants The alternate hypothesis H1 The alternate hypothesis is denoted by the symbol H1. It commonly represents any hypothesis that differs from the null hypothesis. It should be defined in such a way to be accepted only when the null hypothesis is rejected. In the restoration example, H1 is Mycorrhizae has a positive significant effect on the body size of plants. "],["the-experiment.html", "The experiment", " The experiment The process of developing an experiment to answer a question or test a hypothesis is called Experimental Design, and it is full of nuances (commonly called demonic intrusions) that could render your entire work meaningless, so designing a good experiment is critical to obtain robust data. Before we design an experiment, it is important to know several terms. k Population, sample, subject Three important terms for you to know in experimental design are the subject/individual, the sample and the population. Population refers to every individual of interest. The sample refers to only some of the individuals of interest. When you quantify a given variable in an entire population that is called a census. Any statistic based on an entire population is called point stimate. Drag terms where you think they belong. You need to appreciate that statistics from the samples can vary from sample to sample, whereas statistics from the population are fixed for the given population. For instance, in the figure above, yellow birds represent 1 out of ten birds (i.e., 10% of the sample) in the sample outlined with a solid line. Yet in another sample (outlined with a dotted purple line), out of ten individuals there are two yellow birds (i.e., 20%). It is important that you appreciate the differences between the sample and the population, because at times those differences is exactly what you want to measure and test. Say you know that the average heart rate of people is 80 beats per minute but yours is 90 beats per minute. Is your rate significantly higher that it is expected? In this case, you can compare your hearths rate to that of the average population. Later on we will study how to test this mathematically. Variables In experimental design, the word Variables can mean several things, so it is important to be specific. The dependent variable The dependent variable, for instance, is a characteristic of the individual to be measured or observed. This is also called the response variable. In other words, the dependent variable is the attribute of the system you will expect to change, and which you plan to measure. In the case of the restoration hypothesis, it will be the body size of the plants. The independent variable The independent variable is what we will manipulate in the experiment. It can also be called a factor. In the case of the restoration hypothesis, it will be the presence or absence of Mycorrhizae. You can also use different concentrations of Mycorrhiza. Collectively, all the concentrations would be called the independent variable, and each concentration could be call a level. Each likely level in the independent variable can also be called a treatment. Quantitative variable Variables are also used when referring to the type of data you collect. If what you measure in the individuals is numerical (i.e., it can be measured with numbers, for instance, height or weight), it will be called a quantitative variable. Qualitative variable A qualitative variable describes an individual by placing the individual into a category or group (for instance, male or female). The control and treatment Figure 1.11: The population In experimental design, when testing the effects of a given independent variable, it is important to see what happens to individuals in the absence of the effect of such an independent variable. Individuals in the group that are not subject to the independent variable are called collectively the control group. The groups created by individuals that are exposed to the independent variable are collectively called a treatment group. Any difference in the response variable between the control and the treatment will be attributed to the independent variable. Say that individuals in the control group were on average 100g, while those on a given treatment were 120g. From this comparison, you can see that the treatment created a 20% increase in weight. Of course, not all individuals will have exactly the same weight (the so-call variability), and later on, we will see how to use that variability with statistical methods to determine if such a different is statistically significant or not. Replication In experimental design, replication refers to the number of independent individuals in a control or treatment upon which you test your hypothesis. Replication is a critical element in experimental design because it determines the robustness of your conclusion. Drag terms where you think they belong. h In almost any experiment there will be random variation in the response. Thus, an observed difference between the control and treatments could be mistakenly attributed to a cause-and-effect relationship when the source of the difference may just be random variation. In short, the difference may simply be due to the noise rather than the signal. This type of error is affected considerably by the amount of replication you have. Lets use an example. If nothing is wrong with a coin, you know that the probably of head or tail is the same at 50%. However, if you test this hypothesis with one replicate, lets say it landed in tails, then you will conclude that tails occur 100% of the times. If you try for a second time, and lands on tails again, your conclusion remains the same. If it is heads, now you have to change your conclusion as now either side has a 50% change. Lets say you try again, and regardless of where it lands, your probability for either side of the coin now changed to 75%. You can continue doing this over numerous trials, and eventually the probability will rest at about 50% for either side of the coin, again if nothing is wrong with the coin. From the example above, you can see how reduced replication can lead to variation in the conclusions. Lets review the effect of replication mathematically in an exercise, in which I measured the weight of all 1000 seedlings in my nursery. In this case, I have done a census as I measured every single individual. I plotted the number of seedlings at each weight, obtaining the following figure: The average weight of individuals in my population was 99.92 Now lets see what will happen when I take samples of different sizes from that population. In the figure above, each point is the average of a sample with the number of individuals shown in the x-axis. The red line is the true average of the population. From the figure above, you can see how samples with fewer number of replicated individuals have much larger variability in the mean weight than samples with more individuals. Basically, the variability in the samples reduces as I increase the size of replicated individuals. If my population was 1,000 individuals, the closer my sample is to that number, the more accurate the results from my sample. To better visualize the relationship between the number replicates and variability, lets do the same take 100 samples at each sample size: Again, you can see how samples with fewer replicated individuals are more variable than samples with many replicated individuals. There is not a set number of replicates you should use for an experiment as the optimum depends on the degree of variability in the variable you are measuring. Later on we will quantify the optimum sample size for a given population. Sample size and replication are confusing terms and could at times be interrelated. Say that you want to compare a group of individuals to population, in this case each individual will be replicated and all together they will be your sample size. However, if your experiment requires to take multiple samples, each sample with a given number of individuals, then each sample should be treated as independent measures, and in this case, each sample is a replicate. Remember, a replicate needs to be independent from each other. Pseudo-Replication One important assumption when you use statistics is that your replicates have to be independent (i.e., one replicate should not depend on another), and this can be tricky at times. Figure 1.12: Pseudo Replication Lets assume that you want to do an experiment with fishes to see if certain diet is better than other. You already identified that the optimum sample size was 1,000 fish. So, you put 1000 fishes in one aquarium and 1000 fishes in another aquarium, you feed the fish with the different diets, and later on, you measure how heavy the fishes are. The example above is a typical example of pseudo-replication. You may think you have 1,000 replicates, but in reality you only have one, which is each aquarium with fish. In this case, the response you find on each fish is not independent as all fishes in one aquarium are equally affected by whatever happens in the aquarium. Why do you only have one true replicate?. Why data from this experiment be reliable? There is famous paper by Hurlbert in Ecological Monographs in 1984 that outlines the many things that can go wrong due to pseudoreplication. Figure 1.13: likely confusions to emerge due to Pseudo Replication Randomness Another issue to be mindful of when doing experiments is to ensure that any other variable that you cannot test is applied randomly to the individuals in your experiment. The effect of variables that you cannot control or that you do not even know are called demonic intrusions. Basically, these variables can introduce evil effects to your response variable, but this can be controlled by ensuring you do everything randomly. Lets use an example to clarify this. Lets image that you are to run an experiment with two treatments, each with 100 replicated aquarium. Say that you put all the aquarium from one treatment on one side of the lab and the other 100 aquarium from the other treatment on the other side of the lab. What type of demonic intrusion could you think of in this case? I could image that the side of the lab facing the sun in the morning could be less hot than the aquariums on the other side. May be on one side they get more light than the other. May be there are windows, and thus different airflow, affecting oxygen in the water.this list can go on and on. All these variables can affect how your fish in the aquarium grow. As a consequence, in your results you may find a difference between fishes from different aquariums that are not due to the diet but to any of these demonic intrusions, resulting from you putting all aquariums of one treatment on one side of the lab, and the other treatment on the other side. Time to feed could be another non-control variable.. Could fish feed in the morning be less stress than fish feed in the afternoon?. The list of potential artifacts is long, but any likely effect can be avoided by ensuring that any aspect setting up the experiment is done randomly. For instance, locating the aquariums randomly in the laboratory. Design experiment With all considerations above, here are eight rules you need to enforce as you design your experiment (From PeerJ) 1.Begin by identifying a hypothesis for the topic you are interested in. Testable predictions generated will allow you to formulate a hypothesis. The hypothesis is an explanation of how you think a system works based on observation. The hypothesis will be either accepted or rejected based on the data collected. 2.Define parameters for the experiment by being clear and concise in your wording. By clearly defining terms, you can focus in on experimental methods and avoid ambiguity. This ensures that the results will be more accurate and there will be less flexibility in the experimental design, again increasing accuracy (Hurlbert, 1984). 3.Decide if you would like to perform a mensurative or manipulative experiment. A mensurative experiment involves making measurements at different times or in different areas. A manipulative experiment involves physically altering a treatment group, and thus always has two or more treatments (Hurlbert, 1984). 4.Choose an appropriate sample size that is fitting for the results you wish to obtain. Generally, a smaller sample size produces results that are inaccurate for generalization. A smaller sample size will also produce a smaller effect size measure, which is the efficacy of the treatment, and thus should be avoided (Ionnidis, 2005). 5.Introduce a control group. In biology, systems tend to exhibit temporal change, which could be an influencing third variable. In order to isolate any changes to the experimental treatment alone, a control is necessary. 6.Randomize assignment. By randomizing sample units to different treatment groups, experimenter bias is avoided. Randomization is a critical facet of the experimental design as it intersperses the samples being tested (Hurlbert, 1984). 7.Replicate! The number of replicates necessary will vary with design, however it ensures precision in experiments (Oksanen, 2001). 8.Ensure samples are dispersed in space or time to avoid pseudoreplication. This ensures replicates are statistically independent. Often, experimenters will make inferences based on the data collected and quantify samples from the same unit as independent, however in reality the samples come from the same unit, thus it is not a genuine replication (Oksanen, 2001). i "],["data-collection.html", "Data collection", " Data collection Once you have designed and started to run your experiment you need to start measuring your response variable (the so call data). It is important that you are systematic, methodic and organized as you collect data. Create a logbook to document any observation you may have, any change in the variables, responses on the individuals, etc. Document date and time for each observation. And do not lose the logbook. It is critical that you have several copies of your data on different places. Almost everyone has a terrible experience losing data. In my case, I lost my log-book in an airport. Hard drives fail, computers get stolen, etc. Account for any possibility; the last thing you want is to lose all the data from an experiment. "],["analyze-your-data.html", "Analyze your data", " Analyze your data Once you finish your experiment and you have all your data nicely organized. You will have to relay on mathematics to draw a conclusion. This step is called Hypothesis testing, and there are numerous methods that you can use. In the following chapters,we will introduce several statistical methods that you may use to test if your hypothesis is correct or not. "],["vizualize-the-data.html", "Vizualize the data", " Vizualize the data A great scientific story is that one that can be told with a simple figure. Latter on, we will introduce several types of figures that you can use to visualize your data. Figure 1.14: All impacts of climate change on diseases in one figure "],["write-report.html", "Write report", " Write report If you do not publish your results, it almost as if you did not do the research. Your paper needs to be clear, and detailed as to ensure any other person can replicate your study and find your same results. Due to issues related to poor experimental design, statistical test or lack of clarify on what was done, it has been found that a considerable amount of scientific studies are difficult to replicate. A 2016 poll of 1,500 scientists reported that 70% of them had failed to reproduce at least one other scientists experiment (50% had failed to reproduce one of their own experiments), leading to what is currently call a replicability crisis. "],["excercises.html", "Excercises", " Excercises Depending on your Internet connection, exercises may be slow to load. There are two exercises in this section. Exercise 1 The scientific methodd process. Drag boxes on the right into the boxes on the left in the order you think a question should be answered using the scientific method. Exercise 2 Key terms in statistics "],["homework.html", "Homework", " Homework Please do the following exercise: Based on the content of this chapter, think about a problem you have observed and create a flow chart outling the steps you will take to do a relibable experiment. Using a small figure or sketch to draw a likely experiment, and name its parts. Do this in a single sheet of paper. "],["installing-programs.html", "2 Installing programs", " 2 Installing programs We are going to take a break of stats for the following two chapters to install and learn some basics about R. "],["installing-r.html", "Installing R", " Installing R As mentioned earlier, R is free and it can be downloaded from Here. Once in that page click on CRAN (see red arrow in the figure below). Figure 2.1: RProject Webpage Next select the mirror. Mirrors are servers around the world that maintain copies of R and all the packages. You can click on the 0-Cloud, but any mirror will be fine (see image below) Figure 2.2: Installing R Next,select the system of your computer. I recommend you use Windows. There are only small differences between systems, and it should work the same in any system. But if you have Apple, you are on your own. There are several perks in Apple, not a big deal, but be aware that due to compatibility and settings, issues may emerge. Figure 2.3: Installing R Next, download the executable file of R, which is indicated in the read arrow in the figure below. Figure 2.4: Installing R Once downloaded, the file should be in the Downloads folder. Double click on it and accept all the default settings. The R icon should now appear at the bottom your tab or Windows menu (See arrows in image below). Figure 2.5: Installing R Click on the icon, and welcome to R. Crazy how that screen does not look like much but it is a portal to a world of opportunities. Figure 2.6: Installing R "],["tinn-r.html", "Tinn-R", " Tinn-R Once you run a line of code in R, it cannot be un-done. So very commonly, you have to re-run lines of code. For this reason, it is better if you write your code in a text editor program, and then running it R. You can save the text file, and next time, simply copy and paste. You can save your R code in any word processor. Notepad from Windows is just fine. You can also use Microsoft Word, but be mindful that that software commonly capitalizes the first letter in each new line. R is case sensitive, so Word is not worth the trouble. I personally use Tinn-R. It allows you to save your codes in a single file, gives you hints into your code, etc. Please install Tinn-R from here. R is case sensitive. A is different from a in R! This simple rule is at the core of most bugs in R! There is also a very popular GUI (Graphical User Interface) called R-Studio, which you can download from here; use the free version. For the purpose of this class, we will astart with basic R and Tinn-R. I want you to know the insides of R, and later on if you like you can move to use user interfaces that simplify things, but that may also hide things you should know. Click on the Tinn-R icon (see arrow in image below). Once there, click on File, then on New. This will create a clean sheet for you to start writing your codes. You will use this type of sheets to save your codes, as you move along. Figure 2.7: Installing Tinn-R "],["installing-packages.html", "Installing packages", " Installing packages Part of the power of R is that tools developed by users around the world can be integrated into the Rs general functionality. Such tools are integrated into containers called packages, and deposited into the R repository for anyone to use. There are so many tools already developed that chances are there is a packages for anything you may need. The directory of available R-packages is available here. You can click on any available package to learn more about it, including instructions on how to use them. The primary way to install a package is using the command: # install.packages(&quot;raster&quot;) Between brackets should be the name of the package you want to install. You will be prompted to select a mirror. If this is the first time installing a package, you will also be asked to select a folder where to install the packages. I suggest you accept the default suggestions that are provided. Once installed in your local harddrive, you need to load the packages into your console every time you want to use it. To do so, you use the command: library(&quot;raster&quot;) ## Warning: package &#39;raster&#39; was built under R version 4.0.3 ## Loading required package: sp Between quotations is the name of the raster. Rlease remember that R is case sensitive. "],["asking-for-help.html", "Asking for help", " Asking for help You can access help on any specific R function using the question mark sign, followed by the name of the function. For instance, to ask for help on the mean, you type: # ?mean A window with available help on the function will pop-up (like the one in the image below). Figure 2.8: Asking for help in R One super nice thing about Rs help is that it provides examples on how the function should be used. See, for instance, the image above, an example (indicated with the red arrow) on how to use the mean function in R. You can simply copy those lines of commands and paste them in your console. This becomes very useful, as you can simply adjust that given code to your given data. "],["exercise.html", "Exercise", " Exercise Please install R and Tinn-R in your computer. Then install and load the package raster. Run the first example for the function raster. "],["basics-on-data-manipulation-in-r.html", "3 Basics on data manipulation in R", " 3 Basics on data manipulation in R Figure 3.1: R console You should think of R as an advance scientific calculator like the ones you used in high school. Basically, there is a set of basic functions already installed in R, which you can use with your data. You can also install packages, which gives you access to additional functions. Use Google to find what packages may have the functions you need. Say you want to do a genotypic analysis. Simply Google R packages to do genotypic analysis. If you want to do animations, search how to do an animation in R. "],["variables-1.html", "Variables", " Variables Variables in R are names used to storage objects that you can manipulate. For instance, let me create a variable A, whicha I want it to be the value 1. Basically, in the R console I type: A=1 then click Enter. That command, just created a variable A, which has a value of 1. To check, type A +Enter. A ## [1] 1 Lets now create a variable called B, which is equal to 2. B=2 I can now use those two variables to see what happens when I add them: A+B ## [1] 3 You cal also create a new variable based on other variables. For instance: C=A-B C ## [1] -1 You can check all the variables you have created using the command ls() ls() ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;i&quot; ## [5] &quot;MeanPopulation&quot; &quot;MeanSample&quot; &quot;Merge&quot; &quot;Population&quot; ## [9] &quot;Results&quot; &quot;Sample&quot; &quot;SampleSize&quot; &quot;trial&quot; As you can see, up to this moment I have created three variables, named A, B and C. With rare exceptions, each line of command in R is independent. You should try now. Open R in your computer or use the console below. The console below is exactly what you have in R in your computer. We will use this type of window in a few instances in this book, but I recommend you do your practices in your own computer. Create a variable called D=10 and other called z=5, and calculate thhe difference between D and z. "],["comments.html", "Comments", " Comments Comments are text you use to describe your code. They have to be preeceded with the number sign (#). Any line command after # will not be run by R As you start coding, it is always a good practice that you explain with your own words what each line of code is intended for. I cannot tell you the number of times, I have gone back to my old codes and ask myself, what was the purpose of this line. What was I thinking at that time? To ensure codes can be easy understood later on, we use comments. R comments are text added to your code, which R does not process. Any comment in R has to be preceded with the number sign (#). For instance: A=10 # Here I used R to show how to create a variable B=20 # In this case, i wanted my variable B to be 2 A+B ## [1] 30 w "],["operators.html", "Operators", " Operators Assignment operators As you noted in my previous page, I used the equal sign (=) to assign a value to a letter variable; that is called an assignment operator. Another more broadly recommended assignment operator is &gt;-, which is used like this: a&lt;-10 # in this case I used &lt;- as the assigment operators Note that in the code above I use &gt;- instead of = I can verify this, by typing a in the R console and then hitting enter. a ## [1] 10 Arithmetic operators R is preloaded with a lot of built-in mathematical operators. Here are some basic ones: Function Description + Addition - Subtraction * Multiplication / Division ^ Exponent log(x) Natural log log10(x) Common log abs(x) Absolute value sqrt(x) Square root ceiling(x) Round to largest integer floor(x) Round to smallest integer round(x, digits = 0) Round number to given number of digits rep(x, times = 1) Repeat a number a given number of times seq(from, to, by= ) Create a sequence of numbers sample(x,n,replace=T) Select n random numbers from vector x Lets say I have a variable a=145.677, but I one to stimate the largest integer of that number, then a=145.677 b=ceiling(a) b ## [1] 146 Give a try to some of these operators, yourself. Any time you need an operator, but you do not know what is it in R, simply ask your friend Google. Say you want to calculate the cosine of a number?. Simply search in Google How to calculate a cosine in R. Character operators At times, you do not want to handle numbers but words. R also has functions for that. Function Description substr(x, start=n1, stop=n2) Extract or replace substrings in a character vector grep(pattern, x , ignore.case=FALSE, fixed=FALSE) Search for pattern in x sub(pattern, replacement, x, ignore.case =FALSE, fixed=FALSE) Find pattern in x and replace with replacement text strsplit(x, split) Split the elements of character vector x at split paste(, sep=) Concatenate strings Lets try a few examples: a=&quot;camilo1989&quot; #here I have a character variable, but want to remove that number, so b=gsub(&quot;1989&quot;, &quot;&quot;, a) #here I replace the value indicated in between the first quotations, for what is in between the second quotations, in this case nothing. b ## [1] &quot;camilo&quot; Characters are always between quotations and this is done to differentiate from variable names. Say I have a variable I called data but I also have a word I want to use called data as well. In this case data by ilfset will be the database, but data will be recongnized as chracaters. Later on we will get to this. The function paste is another function that you will use a lot. a=&quot;camilo&quot; #here I have a character variable, that I want to concatenate with another one. b=&quot;1989&quot; #second variable. c=paste(a,b,sep=&quot;_&quot;) #here I merge a and b, and separate them with an underscore c ## [1] &quot;camilo_1989&quot; If you want nothing to separate the words, put nothing between the brackets in sep, like this c=paste(a,b,sep=&quot;&quot;) c ## [1] &quot;camilo1989&quot; "],["custom-made-functions.html", "Custom made functions", " Custom made functions As you become better at coding, you probably want to start creating your own functions. You can even create functions, that use other functions. Think of it like a lego game, in which you have thousands of functions (legos) that you can use to create whatever you want. Just as the Legos game, creating functions is very simple. The structure of an R function is as follow: You have the name you want for your function What arguments are needed for your function Between {} you place what you want to do with your arguments Outline what you want to output from your function Lets have an example. Say, I have two numbers (12.78454 and 1.34893439), which I want to first multiple, then divide the result by 2, then estimate the cosine, then multiple by pi, then estimate the ceiling; and I want to do this four times with different starting numbers. So lets start coding this, a=12.78454 #I place first number in a variable, so I do not have to retype all numbers b=1.34893439 #same for second number Multiple_AB=a*b #first command I have to do. Create new varaible multiplying a and b Divide= Multiple_AB/2 #second command is to divide the output by 2 Cosine= cos(Divide) #third command is to estimate the cosine in the results PI=Cosine*pi #four command is to multiply result by pi Cealing=ceiling(PI) #finally, estimate the largest integer Cealing #here is the result of that operation above ## [1] -2 If you see the code above, I wrote 8 lines of code to get the result for the first two set of numbers. If I want to do the same for say three other set of numbers, I will have to write 24 lines of code, not to mention the chance for error. Since the general operation is same for all cases, you can simply create a function, which will reduce the lenght of the code, while ensuring you use exactly the same procedure for all numbers. Lets do it, CamilosFunction &lt;- function(argument1, argument2) { #Argument 1 and 2, are the two numbers I have to run in my function Multiple_AB=argument1*argument2 #first command I have to do Divide= Multiple_AB/2 #second command is to divide the output by 2 Cosine= cos(Divide) #third command is to estimate the cosine in the results PI=Cosine*pi #four command is to multiply result by pi Cealing=ceiling(PI) #finally, estimate the largest integer return (Cealing) #here is the result of that operation above } If you see, all I did was to copy my entire process from the first set of values, and replace a and b, for the arguments in my function, add the {} and name my function. I just created a function, called CamilosFunction, that requires two values, to do the process indicated above, and return the result. Lets see, a=12.78454 b=1.34893439 CamilosFunction (a, b) #here is my function, which run many commands and give me a single result. ## [1] -2 You can now reuse your function with different numbers, each time requiring only one line of code. CamilosFunction (12.78454,10002.78454) ## [1] -2 CamilosFunction (120.78454,102.78454) ## [1] 3 CamilosFunction (912.74,10002.78454) ## [1] -1 Create your own function now. In which you take three numbers (4,2,3), calculate their average, then multiple the result by 4, then estimate the sin, and finally calculate the square. "],["data-structure-types.html", "Data structure types", " Data structure types R provides numerous ways to hold data. Lets check some of them. Vectors A vector is a collection of values. We call the individual values elements of the vector. We can make vectors with c( ). c means combine. Say you have three numbers 1,4,5 and you just do not want to type them every time. you can then put the numbers in a vector. c(1,4,5) #here I have a vector with three numbers ## [1] 1 4 5 You can also run operations in a vector. Lets use the example above, in which I want to multiply each value in that vector by 2. a=c(1,4,5) #here create a variable that contains my vector of three numbers a*2 #here I multiply my variable (vector with three numbers) by 2. ## [1] 2 8 10 Matrix You can merge multiple vectors to create a matrix. You can merge the vectors by columns using the function cbind or by rows using the function rbind. Lets do an example to clarify. Vector1=c(1,4,5) #here I have vector 1 with three numbers Vector2=c(56,42,93) #here I have vector 2 with three numbers ColumnMergedVector=cbind(Vector1,Vector2) #I use cbind to merge the vector by column ColumnMergedVector ## Vector1 Vector2 ## [1,] 1 56 ## [2,] 4 42 ## [3,] 5 93 See in the result above, how each vector became a column. May be you prefer to merge them by rows RowMergedVector=rbind(Vector1,Vector2) #I use rbind to merge the vector by rows RowMergedVector ## [,1] [,2] [,3] ## Vector1 1 4 5 ## Vector2 56 42 93 You can now see how the two vectors were merged by rows. DataFrames Dataframes are the most common type of data structure in R. It is has similar topology to a matrix, but it is more diverse in the types of data it can use. Dataframes, are like the Sheet version in Excel. To create a dataframe you use the data.frame function. Lets do an example. s DataFrame=data.frame(Vector1,Vector2) #I use data.frame to merge two vectros of data DataFrame ## Vector1 Vector2 ## 1 1 56 ## 2 4 42 ## 3 5 93 Dataframes also allow you to rename the column and row names, and there different ways to do that. Here is one, colnames(DataFrame)=c(&quot;Height&quot;,&quot;Width&quot;) #Here I rename the two columsn in the dataframe, with the names used in a vector. DataFrame ## Height Width ## 1 1 56 ## 2 4 42 ## 3 5 93 You are probably asking yourself what is the difference between a matrix and a data.frame?. Here are some differences: Matrix Dataframe Collection of data sets arranged in a two dimensional rectangular organisation Stores data tables that contains multiple data types in multiple column called fields. Its m*n array with similar data type. It is a list of vector of equal length. It is a generalized form of matrix. It has fixed number of rows and columns. It has variable number of rows and columns. The data stored in columns can be only of same data type. The data stored must be numeric, character or factor type. Data types are homogeneous. Data types are heterogeneous. Loading your own data into R R also allows you to import your own data from a diversity of formats. Here we will use the most basic one, which is to import .csv files (the so-called comma delimited data). In this type of file, data are listed by rows, with the number between commas in a row indicating the columns. To load a .csv file in R, you use the command read.csv(). Between brackets you put the path to where the file is located. You write that path between quotation. It sounds complicated, but it is simple. Lets just try an example. Create a folder in your local desktop called Data. It is good practice to keep your data and codes in separated folders that you can then easily identify by the name alone. Download a csv file from here. Right click on the page and click on Save page as in the pop-up window. Name the file Countries_GDP.csv, and navigate to the Data folder you just created to save the file in there. Click Save. That file should now appear in your Data folder. Now that you have the csv file in your local hard-drive, you can load it into R. For this you need to do a couple things. First, get the path to where the file is at. For this, click on your windows explorer (that is the button that looks like a folder in your desktop, see image below) Figure 3.2: Windows explorer Navigate to the folder Data where you saved the file, and put the mouse cursor in the selectable window (See arrow in image below). That will reveal the path where the file is saved in your computer. Figure 3.3: Getting path to file Next, right click on that same window, and click on Copy. That will copy the path to your file (See image below). Figure 3.4: Getting path to file Open R, right click anywhere inside the main window of R and click on Paste. It should look something like this: Figure 3.5: Getting path to file Now you need to replace each back-slash for a forward-slash in your path. The position of those keys in my keyboard are shown in the image below. Figure 3.6: Slash keys in keyboard So the path to the file should be change from this: # &quot;C:\\Users\\Camilo\\Desktop\\Data&quot; to this: # &quot;C:/Users/Camilo/Desktop/Data/&quot; Now, to the path of the folder in which you have the file, you need to add the file name, like this: # &quot;C:/Users/Camilo/Desktop/Data/Countries_GDP.csv&quot; I have to tell you that when I got started in R. A colleague sent me a file and told me to open his file in R. It sounded simple at the time, but it took me two days to figure out all these tiny things about setting the file correctly. Back in those days the internet was not so full of useful tutorials about how to do this. Ok, lets keep going. Now add to your path the R function that is used read csv files, which is read.csv(), like this: # read.csv(&quot;C:/Users/Camilo/Desktop/Data/Countries_GDP.csv&quot;) I suggest you attach this file to a variable name, so you can call it later. GDPData=read.csv(&quot;C:/Users/Camilo/Desktop/Data/Countries_GDP.csv&quot;) That is it, now you have loaded your data into R. Check it out by looking at the top part of the database head (GDPData) ## country continent year gdpPercap ## 1 Afghanistan Asia 1952 779.4453 ## 2 Afghanistan Asia 1957 820.8530 ## 3 Afghanistan Asia 1962 853.1007 ## 4 Afghanistan Asia 1967 836.1971 ## 5 Afghanistan Asia 1972 739.9811 ## 6 Afghanistan Asia 1977 786.1134 By the way, if you know that the csv file in the web will not be deleted or moved, you can read the data from the web directly using the URL to the file, instead of the path. Like this, GDPData=read.csv(&quot;https://raw.githubusercontent.com/Camilo-Mora/GEO380/main/Datasets/Countries_GDP.csv&quot;) Calling elements Ok, now that you know how to store data in R. We need to learn how to see the data. To see a given data container, you can simply typeb its name and click enter. For instance, DataFrame ## Height Width ## 1 1 56 ## 2 4 42 ## 3 5 93 This is an ok way to see your data if the data container is not too big. However, if you have lots of data this command will fill up your screen. Instead, you can use the function head or tail, which will let you see the top five or the bottom five rows in a dataframe. Lets see. Let me first create a medium size dataframe: DataFrame&lt;- data.frame( x1 = c(rep(1,250)), # in Column 1 I repeat the number 1 for 25 times x2 = seq(1:250), #Column 2 I create a sequence of numbers from 1 to 25 x3 = sample(seq(1:1000),250)) # select 25 random numbers between 1 and 10000 In the code above, I just create a dummy dataframe with three columns and 250 rows using functions we already described in the chapter on arithmetic operators. If I try to see the full database, I just type the name of the dataframe and click enter. However, as you will notice calling the full dataframe will use a lot of your screen space because it will attempt to display all the data. DataFrame ## x1 x2 x3 ## 1 1 1 509 ## 2 1 2 966 ## 3 1 3 171 ## 4 1 4 907 ## 5 1 5 410 ## 6 1 6 890 ## 7 1 7 15 ## 8 1 8 122 ## 9 1 9 403 ## 10 1 10 600 ## 11 1 11 982 ## 12 1 12 921 ## 13 1 13 313 ## 14 1 14 439 ## 15 1 15 65 ## 16 1 16 749 ## 17 1 17 245 ## 18 1 18 585 ## 19 1 19 217 ## 20 1 20 549 ## 21 1 21 582 ## 22 1 22 829 ## 23 1 23 529 ## 24 1 24 817 ## 25 1 25 908 ## 26 1 26 889 ## 27 1 27 783 ## 28 1 28 70 ## 29 1 29 158 ## 30 1 30 916 ## 31 1 31 466 ## 32 1 32 801 ## 33 1 33 617 ## 34 1 34 386 ## 35 1 35 557 ## 36 1 36 797 ## 37 1 37 853 ## 38 1 38 476 ## 39 1 39 689 ## 40 1 40 292 ## 41 1 41 716 ## 42 1 42 202 ## 43 1 43 901 ## 44 1 44 73 ## 45 1 45 913 ## 46 1 46 317 ## 47 1 47 418 ## 48 1 48 150 ## 49 1 49 286 ## 50 1 50 653 ## 51 1 51 260 ## 52 1 52 760 ## 53 1 53 252 ## 54 1 54 370 ## 55 1 55 470 ## 56 1 56 556 ## 57 1 57 404 ## 58 1 58 77 ## 59 1 59 661 ## 60 1 60 524 ## 61 1 61 670 ## 62 1 62 694 ## 63 1 63 566 ## 64 1 64 998 ## 65 1 65 828 ## 66 1 66 673 ## 67 1 67 97 ## 68 1 68 89 ## 69 1 69 33 ## 70 1 70 919 ## 71 1 71 859 ## 72 1 72 927 ## 73 1 73 67 ## 74 1 74 397 ## 75 1 75 440 ## 76 1 76 541 ## 77 1 77 43 ## 78 1 78 772 ## 79 1 79 479 ## 80 1 80 947 ## 81 1 81 628 ## 82 1 82 191 ## 83 1 83 369 ## 84 1 84 311 ## 85 1 85 388 ## 86 1 86 253 ## 87 1 87 326 ## 88 1 88 892 ## 89 1 89 841 ## 90 1 90 555 ## 91 1 91 981 ## 92 1 92 584 ## 93 1 93 71 ## 94 1 94 900 ## 95 1 95 818 ## 96 1 96 141 ## 97 1 97 932 ## 98 1 98 675 ## 99 1 99 676 ## 100 1 100 669 ## 101 1 101 179 ## 102 1 102 133 ## 103 1 103 929 ## 104 1 104 559 ## 105 1 105 718 ## 106 1 106 996 ## 107 1 107 408 ## 108 1 108 691 ## 109 1 109 293 ## 110 1 110 277 ## 111 1 111 185 ## 112 1 112 994 ## 113 1 113 563 ## 114 1 114 471 ## 115 1 115 941 ## 116 1 116 41 ## 117 1 117 344 ## 118 1 118 165 ## 119 1 119 60 ## 120 1 120 711 ## 121 1 121 267 ## 122 1 122 887 ## 123 1 123 13 ## 124 1 124 693 ## 125 1 125 508 ## 126 1 126 620 ## 127 1 127 759 ## 128 1 128 494 ## 129 1 129 427 ## 130 1 130 814 ## 131 1 131 771 ## 132 1 132 489 ## 133 1 133 180 ## 134 1 134 226 ## 135 1 135 523 ## 136 1 136 159 ## 137 1 137 140 ## 138 1 138 958 ## 139 1 139 696 ## 140 1 140 314 ## 141 1 141 66 ## 142 1 142 480 ## 143 1 143 825 ## 144 1 144 836 ## 145 1 145 520 ## 146 1 146 256 ## 147 1 147 192 ## 148 1 148 830 ## 149 1 149 746 ## 150 1 150 834 ## 151 1 151 690 ## 152 1 152 232 ## 153 1 153 136 ## 154 1 154 461 ## 155 1 155 583 ## 156 1 156 954 ## 157 1 157 393 ## 158 1 158 334 ## 159 1 159 482 ## 160 1 160 61 ## 161 1 161 62 ## 162 1 162 512 ## 163 1 163 462 ## 164 1 164 624 ## 165 1 165 172 ## 166 1 166 588 ## 167 1 167 647 ## 168 1 168 639 ## 169 1 169 840 ## 170 1 170 98 ## 171 1 171 9 ## 172 1 172 867 ## 173 1 173 608 ## 174 1 174 108 ## 175 1 175 414 ## 176 1 176 731 ## 177 1 177 368 ## 178 1 178 658 ## 179 1 179 74 ## 180 1 180 343 ## 181 1 181 423 ## 182 1 182 580 ## 183 1 183 132 ## 184 1 184 162 ## 185 1 185 186 ## 186 1 186 789 ## 187 1 187 633 ## 188 1 188 773 ## 189 1 189 612 ## 190 1 190 516 ## 191 1 191 310 ## 192 1 192 209 ## 193 1 193 570 ## 194 1 194 546 ## 195 1 195 701 ## 196 1 196 827 ## 197 1 197 483 ## 198 1 198 845 ## 199 1 199 786 ## 200 1 200 839 ## 201 1 201 990 ## 202 1 202 425 ## 203 1 203 231 ## 204 1 204 951 ## 205 1 205 743 ## 206 1 206 721 ## 207 1 207 29 ## 208 1 208 161 ## 209 1 209 146 ## 210 1 210 733 ## 211 1 211 794 ## 212 1 212 198 ## 213 1 213 527 ## 214 1 214 258 ## 215 1 215 485 ## 216 1 216 979 ## 217 1 217 973 ## 218 1 218 897 ## 219 1 219 38 ## 220 1 220 925 ## 221 1 221 874 ## 222 1 222 302 ## 223 1 223 48 ## 224 1 224 598 ## 225 1 225 336 ## 226 1 226 719 ## 227 1 227 668 ## 228 1 228 832 ## 229 1 229 307 ## 230 1 230 784 ## 231 1 231 281 ## 232 1 232 354 ## 233 1 233 899 ## 234 1 234 294 ## 235 1 235 120 ## 236 1 236 318 ## 237 1 237 7 ## 238 1 238 886 ## 239 1 239 596 ## 240 1 240 862 ## 241 1 241 329 ## 242 1 242 478 ## 243 1 243 247 ## 244 1 244 878 ## 245 1 245 152 ## 246 1 246 44 ## 247 1 247 392 ## 248 1 248 752 ## 249 1 249 707 ## 250 1 250 506 Head Alternatively, you can just check the top rows using the head function. Like this: head(DataFrame) ## x1 x2 x3 ## 1 1 1 509 ## 2 1 2 966 ## 3 1 3 171 ## 4 1 4 907 ## 5 1 5 410 ## 6 1 6 890 Tail Or the bottom rows using the tail function. Like this: tail(DataFrame) ## x1 x2 x3 ## 245 1 245 152 ## 246 1 246 44 ## 247 1 247 392 ## 248 1 248 752 ## 249 1 249 707 ## 250 1 250 506 Index You can also check specific elements of the dataframe using the index function, which in R is indicated with the square brackets [row,column]. The number to the left of the comma will be the row number, and the number to the right the column number. If you do not add a number, it will display all columns or all rows. For instance, check what number is in column 3 in the 2th row? DataFrame[2,3] ## [1] 966 Calling columns by name To call a column by name in a dataframe, you use the dollar sign $ to merge the name of the dataframe with the name of the column, like this, head(DataFrame$x3) #here I only display the top values of the column Country_Name ## [1] 509 966 171 907 410 890 "],["filter-data.html", "Filter data", " Filter data A recurring task in data analytics is to filter data, this means to select specific subsets/chucks of your data. Filters can be used to create new variables, to apply new functions, to see specific data, etc. There are numerous ways to filter data in R, but here we wall use the function filter in the package dplyr. # install.packages(&quot;dplyr&quot;) #First, I install the package dplyr, since I have not installed it previously library(dplyr) #next I load the package into the current section of R. Now, lets check the first few rows in the GDP database we loaded earlier, tail(GDPData) #lets look at the column head of the GDP data we loaded earlier. ## country continent year gdpPercap ## 1699 Zimbabwe Africa 1982 788.8550 ## 1700 Zimbabwe Africa 1987 706.1573 ## 1701 Zimbabwe Africa 1992 693.4208 ## 1702 Zimbabwe Africa 1997 792.4500 ## 1703 Zimbabwe Africa 2002 672.0386 ## 1704 Zimbabwe Africa 2007 469.7093 From the subset of the data above, you can see that the GDPData database has four columns, and from the year column, you can tell that the data of GDP (gdpPercap) is repeated for each year. Hmm, but what if I just want to see the data for countries in Asia?. For that we use the function filter. The syntax of the filter function reads like this: Figure 3.7: Filter function Pipes, %&gt;%, are a powerful tool for doing sequential operations. Commonly it requires tthe tidyverse package. In the next section you will better see the use of pipes. Now that you know the syntax of the filter function from the dplr package, lets test it. GDPData %&gt;% filter(continent==&quot;Asia&quot;) ## country continent year gdpPercap ## 1 Afghanistan Asia 1952 779.4453 ## 2 Afghanistan Asia 1957 820.8530 ## 3 Afghanistan Asia 1962 853.1007 ## 4 Afghanistan Asia 1967 836.1971 ## 5 Afghanistan Asia 1972 739.9811 ## 6 Afghanistan Asia 1977 786.1134 ## 7 Afghanistan Asia 1982 978.0114 ## 8 Afghanistan Asia 1987 852.3959 ## 9 Afghanistan Asia 1992 649.3414 ## 10 Afghanistan Asia 1997 635.3414 ## 11 Afghanistan Asia 2002 726.7341 ## 12 Afghanistan Asia 2007 974.5803 ## 13 Bahrain Asia 1952 9867.0848 ## 14 Bahrain Asia 1957 11635.7995 ## 15 Bahrain Asia 1962 12753.2751 ## 16 Bahrain Asia 1967 14804.6727 ## 17 Bahrain Asia 1972 18268.6584 ## 18 Bahrain Asia 1977 19340.1020 ## 19 Bahrain Asia 1982 19211.1473 ## 20 Bahrain Asia 1987 18524.0241 ## 21 Bahrain Asia 1992 19035.5792 ## 22 Bahrain Asia 1997 20292.0168 ## 23 Bahrain Asia 2002 23403.5593 ## 24 Bahrain Asia 2007 29796.0483 ## 25 Bangladesh Asia 1952 684.2442 ## 26 Bangladesh Asia 1957 661.6375 ## 27 Bangladesh Asia 1962 686.3416 ## 28 Bangladesh Asia 1967 721.1861 ## 29 Bangladesh Asia 1972 630.2336 ## 30 Bangladesh Asia 1977 659.8772 ## 31 Bangladesh Asia 1982 676.9819 ## 32 Bangladesh Asia 1987 751.9794 ## 33 Bangladesh Asia 1992 837.8102 ## 34 Bangladesh Asia 1997 972.7700 ## 35 Bangladesh Asia 2002 1136.3904 ## 36 Bangladesh Asia 2007 1391.2538 ## 37 Cambodia Asia 1952 368.4693 ## 38 Cambodia Asia 1957 434.0383 ## 39 Cambodia Asia 1962 496.9136 ## 40 Cambodia Asia 1967 523.4323 ## 41 Cambodia Asia 1972 421.6240 ## 42 Cambodia Asia 1977 524.9722 ## 43 Cambodia Asia 1982 624.4755 ## 44 Cambodia Asia 1987 683.8956 ## 45 Cambodia Asia 1992 682.3032 ## 46 Cambodia Asia 1997 734.2852 ## 47 Cambodia Asia 2002 896.2260 ## 48 Cambodia Asia 2007 1713.7787 ## 49 China Asia 1952 400.4486 ## 50 China Asia 1957 575.9870 ## 51 China Asia 1962 487.6740 ## 52 China Asia 1967 612.7057 ## 53 China Asia 1972 676.9001 ## 54 China Asia 1977 741.2375 ## 55 China Asia 1982 962.4214 ## 56 China Asia 1987 1378.9040 ## 57 China Asia 1992 1655.7842 ## 58 China Asia 1997 2289.2341 ## 59 China Asia 2002 3119.2809 ## 60 China Asia 2007 4959.1149 ## 61 Hong Kong, China Asia 1952 3054.4212 ## 62 Hong Kong, China Asia 1957 3629.0765 ## 63 Hong Kong, China Asia 1962 4692.6483 ## 64 Hong Kong, China Asia 1967 6197.9628 ## 65 Hong Kong, China Asia 1972 8315.9281 ## 66 Hong Kong, China Asia 1977 11186.1413 ## 67 Hong Kong, China Asia 1982 14560.5305 ## 68 Hong Kong, China Asia 1987 20038.4727 ## 69 Hong Kong, China Asia 1992 24757.6030 ## 70 Hong Kong, China Asia 1997 28377.6322 ## 71 Hong Kong, China Asia 2002 30209.0152 ## 72 Hong Kong, China Asia 2007 39724.9787 ## 73 India Asia 1952 546.5657 ## 74 India Asia 1957 590.0620 ## 75 India Asia 1962 658.3472 ## 76 India Asia 1967 700.7706 ## 77 India Asia 1972 724.0325 ## 78 India Asia 1977 813.3373 ## 79 India Asia 1982 855.7235 ## 80 India Asia 1987 976.5127 ## 81 India Asia 1992 1164.4068 ## 82 India Asia 1997 1458.8174 ## 83 India Asia 2002 1746.7695 ## 84 India Asia 2007 2452.2104 ## 85 Indonesia Asia 1952 749.6817 ## 86 Indonesia Asia 1957 858.9003 ## 87 Indonesia Asia 1962 849.2898 ## 88 Indonesia Asia 1967 762.4318 ## 89 Indonesia Asia 1972 1111.1079 ## 90 Indonesia Asia 1977 1382.7021 ## 91 Indonesia Asia 1982 1516.8730 ## 92 Indonesia Asia 1987 1748.3570 ## 93 Indonesia Asia 1992 2383.1409 ## 94 Indonesia Asia 1997 3119.3356 ## 95 Indonesia Asia 2002 2873.9129 ## 96 Indonesia Asia 2007 3540.6516 ## 97 Iran Asia 1952 3035.3260 ## 98 Iran Asia 1957 3290.2576 ## 99 Iran Asia 1962 4187.3298 ## 100 Iran Asia 1967 5906.7318 ## 101 Iran Asia 1972 9613.8186 ## 102 Iran Asia 1977 11888.5951 ## 103 Iran Asia 1982 7608.3346 ## 104 Iran Asia 1987 6642.8814 ## 105 Iran Asia 1992 7235.6532 ## 106 Iran Asia 1997 8263.5903 ## 107 Iran Asia 2002 9240.7620 ## 108 Iran Asia 2007 11605.7145 ## 109 Iraq Asia 1952 4129.7661 ## 110 Iraq Asia 1957 6229.3336 ## 111 Iraq Asia 1962 8341.7378 ## 112 Iraq Asia 1967 8931.4598 ## 113 Iraq Asia 1972 9576.0376 ## 114 Iraq Asia 1977 14688.2351 ## 115 Iraq Asia 1982 14517.9071 ## 116 Iraq Asia 1987 11643.5727 ## 117 Iraq Asia 1992 3745.6407 ## 118 Iraq Asia 1997 3076.2398 ## 119 Iraq Asia 2002 4390.7173 ## 120 Iraq Asia 2007 4471.0619 ## 121 Israel Asia 1952 4086.5221 ## 122 Israel Asia 1957 5385.2785 ## 123 Israel Asia 1962 7105.6307 ## 124 Israel Asia 1967 8393.7414 ## 125 Israel Asia 1972 12786.9322 ## 126 Israel Asia 1977 13306.6192 ## 127 Israel Asia 1982 15367.0292 ## 128 Israel Asia 1987 17122.4799 ## 129 Israel Asia 1992 18051.5225 ## 130 Israel Asia 1997 20896.6092 ## 131 Israel Asia 2002 21905.5951 ## 132 Israel Asia 2007 25523.2771 ## 133 Japan Asia 1952 3216.9563 ## 134 Japan Asia 1957 4317.6944 ## 135 Japan Asia 1962 6576.6495 ## 136 Japan Asia 1967 9847.7886 ## 137 Japan Asia 1972 14778.7864 ## 138 Japan Asia 1977 16610.3770 ## 139 Japan Asia 1982 19384.1057 ## 140 Japan Asia 1987 22375.9419 ## 141 Japan Asia 1992 26824.8951 ## 142 Japan Asia 1997 28816.5850 ## 143 Japan Asia 2002 28604.5919 ## 144 Japan Asia 2007 31656.0681 ## 145 Jordan Asia 1952 1546.9078 ## 146 Jordan Asia 1957 1886.0806 ## 147 Jordan Asia 1962 2348.0092 ## 148 Jordan Asia 1967 2741.7963 ## 149 Jordan Asia 1972 2110.8563 ## 150 Jordan Asia 1977 2852.3516 ## 151 Jordan Asia 1982 4161.4160 ## 152 Jordan Asia 1987 4448.6799 ## 153 Jordan Asia 1992 3431.5936 ## 154 Jordan Asia 1997 3645.3796 ## 155 Jordan Asia 2002 3844.9172 ## 156 Jordan Asia 2007 4519.4612 ## 157 Korea, Dem. Rep. Asia 1952 1088.2778 ## 158 Korea, Dem. Rep. Asia 1957 1571.1347 ## 159 Korea, Dem. Rep. Asia 1962 1621.6936 ## 160 Korea, Dem. Rep. Asia 1967 2143.5406 ## 161 Korea, Dem. Rep. Asia 1972 3701.6215 ## 162 Korea, Dem. Rep. Asia 1977 4106.3012 ## 163 Korea, Dem. Rep. Asia 1982 4106.5253 ## 164 Korea, Dem. Rep. Asia 1987 4106.4923 ## 165 Korea, Dem. Rep. Asia 1992 3726.0635 ## 166 Korea, Dem. Rep. Asia 1997 1690.7568 ## 167 Korea, Dem. Rep. Asia 2002 1646.7582 ## 168 Korea, Dem. Rep. Asia 2007 1593.0655 ## 169 Korea, Rep. Asia 1952 1030.5922 ## 170 Korea, Rep. Asia 1957 1487.5935 ## 171 Korea, Rep. Asia 1962 1536.3444 ## 172 Korea, Rep. Asia 1967 2029.2281 ## 173 Korea, Rep. Asia 1972 3030.8767 ## 174 Korea, Rep. Asia 1977 4657.2210 ## 175 Korea, Rep. Asia 1982 5622.9425 ## 176 Korea, Rep. Asia 1987 8533.0888 ## 177 Korea, Rep. Asia 1992 12104.2787 ## 178 Korea, Rep. Asia 1997 15993.5280 ## 179 Korea, Rep. Asia 2002 19233.9882 ## 180 Korea, Rep. Asia 2007 23348.1397 ## 181 Kuwait Asia 1952 108382.3529 ## 182 Kuwait Asia 1957 113523.1329 ## 183 Kuwait Asia 1962 95458.1118 ## 184 Kuwait Asia 1967 80894.8833 ## 185 Kuwait Asia 1972 109347.8670 ## 186 Kuwait Asia 1977 59265.4771 ## 187 Kuwait Asia 1982 31354.0357 ## 188 Kuwait Asia 1987 28118.4300 ## 189 Kuwait Asia 1992 34932.9196 ## 190 Kuwait Asia 1997 40300.6200 ## 191 Kuwait Asia 2002 35110.1057 ## 192 Kuwait Asia 2007 47306.9898 ## 193 Lebanon Asia 1952 4834.8041 ## 194 Lebanon Asia 1957 6089.7869 ## 195 Lebanon Asia 1962 5714.5606 ## 196 Lebanon Asia 1967 6006.9830 ## 197 Lebanon Asia 1972 7486.3843 ## 198 Lebanon Asia 1977 8659.6968 ## 199 Lebanon Asia 1982 7640.5195 ## 200 Lebanon Asia 1987 5377.0913 ## 201 Lebanon Asia 1992 6890.8069 ## 202 Lebanon Asia 1997 8754.9639 ## 203 Lebanon Asia 2002 9313.9388 ## 204 Lebanon Asia 2007 10461.0587 ## 205 Malaysia Asia 1952 1831.1329 ## 206 Malaysia Asia 1957 1810.0670 ## 207 Malaysia Asia 1962 2036.8849 ## 208 Malaysia Asia 1967 2277.7424 ## 209 Malaysia Asia 1972 2849.0948 ## 210 Malaysia Asia 1977 3827.9216 ## 211 Malaysia Asia 1982 4920.3560 ## 212 Malaysia Asia 1987 5249.8027 ## 213 Malaysia Asia 1992 7277.9128 ## 214 Malaysia Asia 1997 10132.9096 ## 215 Malaysia Asia 2002 10206.9779 ## 216 Malaysia Asia 2007 12451.6558 ## 217 Mongolia Asia 1952 786.5669 ## 218 Mongolia Asia 1957 912.6626 ## 219 Mongolia Asia 1962 1056.3540 ## 220 Mongolia Asia 1967 1226.0411 ## 221 Mongolia Asia 1972 1421.7420 ## 222 Mongolia Asia 1977 1647.5117 ## 223 Mongolia Asia 1982 2000.6031 ## 224 Mongolia Asia 1987 2338.0083 ## 225 Mongolia Asia 1992 1785.4020 ## 226 Mongolia Asia 1997 1902.2521 ## 227 Mongolia Asia 2002 2140.7393 ## 228 Mongolia Asia 2007 3095.7723 ## 229 Myanmar Asia 1952 331.0000 ## 230 Myanmar Asia 1957 350.0000 ## 231 Myanmar Asia 1962 388.0000 ## 232 Myanmar Asia 1967 349.0000 ## 233 Myanmar Asia 1972 357.0000 ## 234 Myanmar Asia 1977 371.0000 ## 235 Myanmar Asia 1982 424.0000 ## 236 Myanmar Asia 1987 385.0000 ## 237 Myanmar Asia 1992 347.0000 ## 238 Myanmar Asia 1997 415.0000 ## 239 Myanmar Asia 2002 611.0000 ## 240 Myanmar Asia 2007 944.0000 ## 241 Nepal Asia 1952 545.8657 ## 242 Nepal Asia 1957 597.9364 ## 243 Nepal Asia 1962 652.3969 ## 244 Nepal Asia 1967 676.4422 ## 245 Nepal Asia 1972 674.7881 ## 246 Nepal Asia 1977 694.1124 ## 247 Nepal Asia 1982 718.3731 ## 248 Nepal Asia 1987 775.6325 ## 249 Nepal Asia 1992 897.7404 ## 250 Nepal Asia 1997 1010.8921 ## 251 Nepal Asia 2002 1057.2063 ## 252 Nepal Asia 2007 1091.3598 ## 253 Oman Asia 1952 1828.2303 ## 254 Oman Asia 1957 2242.7466 ## 255 Oman Asia 1962 2924.6381 ## 256 Oman Asia 1967 4720.9427 ## 257 Oman Asia 1972 10618.0385 ## 258 Oman Asia 1977 11848.3439 ## 259 Oman Asia 1982 12954.7910 ## 260 Oman Asia 1987 18115.2231 ## 261 Oman Asia 1992 18616.7069 ## 262 Oman Asia 1997 19702.0558 ## 263 Oman Asia 2002 19774.8369 ## 264 Oman Asia 2007 22316.1929 ## 265 Pakistan Asia 1952 684.5971 ## 266 Pakistan Asia 1957 747.0835 ## 267 Pakistan Asia 1962 803.3427 ## 268 Pakistan Asia 1967 942.4083 ## 269 Pakistan Asia 1972 1049.9390 ## 270 Pakistan Asia 1977 1175.9212 ## 271 Pakistan Asia 1982 1443.4298 ## 272 Pakistan Asia 1987 1704.6866 ## 273 Pakistan Asia 1992 1971.8295 ## 274 Pakistan Asia 1997 2049.3505 ## 275 Pakistan Asia 2002 2092.7124 ## 276 Pakistan Asia 2007 2605.9476 ## 277 Philippines Asia 1952 1272.8810 ## 278 Philippines Asia 1957 1547.9448 ## 279 Philippines Asia 1962 1649.5522 ## 280 Philippines Asia 1967 1814.1274 ## 281 Philippines Asia 1972 1989.3741 ## 282 Philippines Asia 1977 2373.2043 ## 283 Philippines Asia 1982 2603.2738 ## 284 Philippines Asia 1987 2189.6350 ## 285 Philippines Asia 1992 2279.3240 ## 286 Philippines Asia 1997 2536.5349 ## 287 Philippines Asia 2002 2650.9211 ## 288 Philippines Asia 2007 3190.4810 ## 289 Saudi Arabia Asia 1952 6459.5548 ## 290 Saudi Arabia Asia 1957 8157.5912 ## 291 Saudi Arabia Asia 1962 11626.4197 ## 292 Saudi Arabia Asia 1967 16903.0489 ## 293 Saudi Arabia Asia 1972 24837.4287 ## 294 Saudi Arabia Asia 1977 34167.7626 ## 295 Saudi Arabia Asia 1982 33693.1753 ## 296 Saudi Arabia Asia 1987 21198.2614 ## 297 Saudi Arabia Asia 1992 24841.6178 ## 298 Saudi Arabia Asia 1997 20586.6902 ## 299 Saudi Arabia Asia 2002 19014.5412 ## 300 Saudi Arabia Asia 2007 21654.8319 ## 301 Singapore Asia 1952 2315.1382 ## 302 Singapore Asia 1957 2843.1044 ## 303 Singapore Asia 1962 3674.7356 ## 304 Singapore Asia 1967 4977.4185 ## 305 Singapore Asia 1972 8597.7562 ## 306 Singapore Asia 1977 11210.0895 ## 307 Singapore Asia 1982 15169.1611 ## 308 Singapore Asia 1987 18861.5308 ## 309 Singapore Asia 1992 24769.8912 ## 310 Singapore Asia 1997 33519.4766 ## 311 Singapore Asia 2002 36023.1054 ## 312 Singapore Asia 2007 47143.1796 ## 313 Sri Lanka Asia 1952 1083.5320 ## 314 Sri Lanka Asia 1957 1072.5466 ## 315 Sri Lanka Asia 1962 1074.4720 ## 316 Sri Lanka Asia 1967 1135.5143 ## 317 Sri Lanka Asia 1972 1213.3955 ## 318 Sri Lanka Asia 1977 1348.7757 ## 319 Sri Lanka Asia 1982 1648.0798 ## 320 Sri Lanka Asia 1987 1876.7668 ## 321 Sri Lanka Asia 1992 2153.7392 ## 322 Sri Lanka Asia 1997 2664.4773 ## 323 Sri Lanka Asia 2002 3015.3788 ## 324 Sri Lanka Asia 2007 3970.0954 ## 325 Syria Asia 1952 1643.4854 ## 326 Syria Asia 1957 2117.2349 ## 327 Syria Asia 1962 2193.0371 ## 328 Syria Asia 1967 1881.9236 ## 329 Syria Asia 1972 2571.4230 ## 330 Syria Asia 1977 3195.4846 ## 331 Syria Asia 1982 3761.8377 ## 332 Syria Asia 1987 3116.7743 ## 333 Syria Asia 1992 3340.5428 ## 334 Syria Asia 1997 4014.2390 ## 335 Syria Asia 2002 4090.9253 ## 336 Syria Asia 2007 4184.5481 ## 337 Taiwan Asia 1952 1206.9479 ## 338 Taiwan Asia 1957 1507.8613 ## 339 Taiwan Asia 1962 1822.8790 ## 340 Taiwan Asia 1967 2643.8587 ## 341 Taiwan Asia 1972 4062.5239 ## 342 Taiwan Asia 1977 5596.5198 ## 343 Taiwan Asia 1982 7426.3548 ## 344 Taiwan Asia 1987 11054.5618 ## 345 Taiwan Asia 1992 15215.6579 ## 346 Taiwan Asia 1997 20206.8210 ## 347 Taiwan Asia 2002 23235.4233 ## 348 Taiwan Asia 2007 28718.2768 ## 349 Thailand Asia 1952 757.7974 ## 350 Thailand Asia 1957 793.5774 ## 351 Thailand Asia 1962 1002.1992 ## 352 Thailand Asia 1967 1295.4607 ## 353 Thailand Asia 1972 1524.3589 ## 354 Thailand Asia 1977 1961.2246 ## 355 Thailand Asia 1982 2393.2198 ## 356 Thailand Asia 1987 2982.6538 ## 357 Thailand Asia 1992 4616.8965 ## 358 Thailand Asia 1997 5852.6255 ## 359 Thailand Asia 2002 5913.1875 ## 360 Thailand Asia 2007 7458.3963 ## 361 Vietnam Asia 1952 605.0665 ## 362 Vietnam Asia 1957 676.2854 ## 363 Vietnam Asia 1962 772.0492 ## 364 Vietnam Asia 1967 637.1233 ## 365 Vietnam Asia 1972 699.5016 ## 366 Vietnam Asia 1977 713.5371 ## 367 Vietnam Asia 1982 707.2358 ## 368 Vietnam Asia 1987 820.7994 ## 369 Vietnam Asia 1992 989.0231 ## 370 Vietnam Asia 1997 1385.8968 ## 371 Vietnam Asia 2002 1764.4567 ## 372 Vietnam Asia 2007 2441.5764 ## 373 West Bank and Gaza Asia 1952 1515.5923 ## 374 West Bank and Gaza Asia 1957 1827.0677 ## 375 West Bank and Gaza Asia 1962 2198.9563 ## 376 West Bank and Gaza Asia 1967 2649.7150 ## 377 West Bank and Gaza Asia 1972 3133.4093 ## 378 West Bank and Gaza Asia 1977 3682.8315 ## 379 West Bank and Gaza Asia 1982 4336.0321 ## 380 West Bank and Gaza Asia 1987 5107.1974 ## 381 West Bank and Gaza Asia 1992 6017.6548 ## 382 West Bank and Gaza Asia 1997 7110.6676 ## 383 West Bank and Gaza Asia 2002 4515.4876 ## 384 West Bank and Gaza Asia 2007 3025.3498 ## 385 Yemen, Rep. Asia 1952 781.7176 ## 386 Yemen, Rep. Asia 1957 804.8305 ## 387 Yemen, Rep. Asia 1962 825.6232 ## 388 Yemen, Rep. Asia 1967 862.4421 ## 389 Yemen, Rep. Asia 1972 1265.0470 ## 390 Yemen, Rep. Asia 1977 1829.7652 ## 391 Yemen, Rep. Asia 1982 1977.5570 ## 392 Yemen, Rep. Asia 1987 1971.7415 ## 393 Yemen, Rep. Asia 1992 1879.4967 ## 394 Yemen, Rep. Asia 1997 2117.4845 ## 395 Yemen, Rep. Asia 2002 2234.8208 ## 396 Yemen, Rep. Asia 2007 2280.7699 From the results above, you can see how only data from Asia were selected. "],["pivot-table.html", "Pivot table", " Pivot table Pivottables are a functionality originally developed in Excel, which allows you to summarize data by attributes. Lets do an example to see how this work. tail(GDPData) #lets look at the column head of the GDP data we loaded earlier. ## country continent year gdpPercap ## 1699 Zimbabwe Africa 1982 788.8550 ## 1700 Zimbabwe Africa 1987 706.1573 ## 1701 Zimbabwe Africa 1992 693.4208 ## 1702 Zimbabwe Africa 1997 792.4500 ## 1703 Zimbabwe Africa 2002 672.0386 ## 1704 Zimbabwe Africa 2007 469.7093 If you look at the GDP database above, you will see that the data also includes the years of the GDPs. What if I want to summarize the data by country? Say for each country, I just want the average of all GDPs of the different years?. For that we use the function summarize from the dplr package. Like this: GDPData %&gt;% group_by(country) %&gt;% summarize(mean_GDP = mean(gdpPercap)) Ok, now let that code talk to you. Code is like reading a book; you read from the first word forward to start making a visual representation of that the sentence is saying. Coding is not different. Lets take the code above and read it from left to right, like in the image below. In the image below you can see what each part of the code is saying. Figure 3.8: Filter function It is a good practice for you to read the code. Lets tray to translate the code above (look at the image above as we do the translation). Here I go.first I take the dataframe called GDPData, then I group that dataframe by country, then I summarize the data on GDP by the mean values, oh, and I want the resulting mean to be called mean_GDP. Easy right!. "],["merge-data.html", "Merge data", " Merge data One other very common operation in R coding is to merge dataframes by common attributes (i.e., common column). In the section about Data structure types, we sow how to merge matrices or dataframes using the rbind or cbind functions, which work when the different databases can be paired by simply appending one database to the other. For instance, when the columns are in exact order in the two databases. Here we will use the merge function, or so call full_join from the dplr package, which works for cases when the data cannot be paired by simply appending one database to another. For instance, when the columns and/or rows are not in the exact order. Figure 3.9: Merging function Lets use an example. As you know we have already loaded in this current section of R a database of the GPDs of the countries in the world. What if I now collect another database about the average life expectancy per country, and want to put those two databases together? Since the data comes from difference sources, chances are that they differ in the number of columns, in the order of the columns, in the number of rows, etc. Basically, you cannot use rbind or cbind in this case. You could do that pairing of the two database by brutal force, copying the data from each country from one database, and pasting it in the same row for the given country in the other database. Say that operation takes you ten seconds for each country, and there are 250 countries, then that job will take you about 40 minutes, not to mention the chance for errors. Oh, but remember that each country has 40 years of data. So multiplyy the 40 minutes times 40 years, and you end up copying and pasting for more than a day. Alternatively you have R do the merging for you. Lets try it. First, lets load the data on the life expectancy, which I have placed in my Github folder ExpectancyData=read.csv(&quot;https://raw.githubusercontent.com/Camilo-Mora/GEO380/main/Datasets/Countries_LifeExpectancy.csv&quot;) It is good practice to always check at least a portion of the database to check it has been loaded correctly, tail(ExpectancyData) #lets look at the column head of the Expectancy data we just loaded. ## X country continent year lifeExp ## 1699 1699 Zimbabwe Africa 1982 60.363 ## 1700 1700 Zimbabwe Africa 1987 62.351 ## 1701 1701 Zimbabwe Africa 1992 60.377 ## 1702 1702 Zimbabwe Africa 1997 46.809 ## 1703 1703 Zimbabwe Africa 2002 39.989 ## 1704 1704 Zimbabwe Africa 2007 43.487 Lets check the GDP database as well. tail(GDPData) #lets look at the column head of the GDP data we loaded earlier. ## country continent year gdpPercap ## 1699 Zimbabwe Africa 1982 788.8550 ## 1700 Zimbabwe Africa 1987 706.1573 ## 1701 Zimbabwe Africa 1992 693.4208 ## 1702 Zimbabwe Africa 1997 792.4500 ## 1703 Zimbabwe Africa 2002 672.0386 ## 1704 Zimbabwe Africa 2007 469.7093 Ok, we now have two databases loaded in R, one for the data on GDP and the other for the data on life expectancy. Lets merge them together, like this: MergeData &lt;- full_join(GDPData, ExpectancyData, by = c(&quot;country&quot;,&quot;year&quot;)) Now lets try to read, that line of code, like this: Figure 3.10: Merging function If I translate thisbasically, create a new dataframe called MergeData, in which I want to merge in full the database on GDPData and ExpectancyData by their common attribute country and year. tail(MergeData) #Check the results ## country continent.x year gdpPercap X continent.y lifeExp ## 1699 Zimbabwe Africa 1982 788.8550 1699 Africa 60.363 ## 1700 Zimbabwe Africa 1987 706.1573 1700 Africa 62.351 ## 1701 Zimbabwe Africa 1992 693.4208 1701 Africa 60.377 ## 1702 Zimbabwe Africa 1997 792.4500 1702 Africa 46.809 ## 1703 Zimbabwe Africa 2002 672.0386 1703 Africa 39.989 ## 1704 Zimbabwe Africa 2007 469.7093 1704 Africa 43.487 "],["subsetting-columns.html", "Subsetting columns", " Subsetting columns From the new database I just created, you can see how there are some columns that came with the original databases, which I do not need and do not I want to use. For this, you can create a new database with only the columns you want or delete the columns you do not like. Lets try. Deleting columns This is the simplest approach. Basically, I set the column I want to delete to NULL. Like this, MergeData$X= NULL #with this code I delete the column called X, which is probably an index number used by one of the data sources Now, you try to delete the column continent.x. Selecting columns Obviously, if you have many columns that you do not need, deleting columns may take a while, as you have to type each column name you want to delete. Alternatively, you can simply select the columns you need. Like this, SelectedColumns=MergeData[, c(&quot;country&quot;,&quot;year&quot;, &quot;gdpPercap&quot;, &quot;lifeExp&quot; ) ] This syntax should be familiar to you already. As it is the indexing function we used earlier [rows, columns]. If you read the code above, basically.I created a new database called SelectedColumns, which takes the database MergeData and select all rows (because there is nothing to the left of the comma) and the four columns listed in the vector after the comma. head(SelectedColumns) ## country year gdpPercap lifeExp ## 1 Afghanistan 1952 779.4453 28.801 ## 2 Afghanistan 1957 820.8530 30.332 ## 3 Afghanistan 1962 853.1007 31.997 ## 4 Afghanistan 1967 836.1971 34.020 ## 5 Afghanistan 1972 739.9811 36.088 ## 6 Afghanistan 1977 786.1134 38.438 f "],["adding-results-to-databases.html", "Adding results to databases", " Adding results to databases Up to this point, we have simply manipulated the data other people collected. What if we now want to do our own analysis with such data? Piece of cake lets tray, for instance, a new index, in which I want to see how much does it cost a year of life in each country. Basically, all I have to do is to divide how much each person does in each country (i.e., GDP per capita) by the life expectancy of people in each country. Like this, SelectedColumns$ValueofLife = SelectedColumns$gdpPercap / SelectedColumns$lifeExp WE cant translate the code above as, a a column called ValueofLife to the dataframe SelectedColumns, in which I divide gdpPercap by lifeExp. Lets check the results, head(SelectedColumns) ## country year gdpPercap lifeExp ValueofLife ## 1 Afghanistan 1952 779.4453 28.801 27.06313 ## 2 Afghanistan 1957 820.8530 30.332 27.06228 ## 3 Afghanistan 1962 853.1007 31.997 26.66190 ## 4 Afghanistan 1967 836.1971 34.020 24.57957 ## 5 Afghanistan 1972 739.9811 36.088 20.50491 ## 6 Afghanistan 1977 786.1134 38.438 20.45146 Lets do a quiick summary to see the average per country, SelectedColumns %&gt;% group_by(country) %&gt;% summarize(mean_valueOfLife = mean(ValueofLife)) ## # A tibble: 142 x 2 ## country mean_valueOfLife ## &lt;chr&gt; &lt;dbl&gt; ## 1 Afghanistan 21.8 ## 2 Albania 46.7 ## 3 Algeria 73.7 ## 4 Angola 97.2 ## 5 Argentina 129. ## 6 Australia 263. ## 7 Austria 273. ## 8 Bahrain 271. ## 9 Bangladesh 16.3 ## 10 Belgium 266. ## # ... with 132 more rows Have a look at the result above. Isnt it fascinating how in Afghanistan we could increase the life expectancy by one year by simply having people making $21.8 dollars more! "],["exercise-3.html", "Exercise", " Exercise "],["homework-1.html", "Homework", " Homework Do the following exercise: Open a new file in Tinn-R. and write the R code to do the following: Load the GDP and life expectancy databases, which we already loaded. Also add a database called, Countries_Population.csv, which is in the same path you used for the other two databases thata re online in my Github folder. Merge the three databases, by country and year. Remove all unnecessary columns (you only want country, year, GDP per capita, life expectancy and population). Calculate the total GDP of each nation (basically, multiple per capita GDP by the number of people). Calculate the average Total GDP of each country. Save the necessary code in Tinn and have it ready for next class. "],["basic-plots.html", "4 Basic plots", " 4 Basic plots Making good quality plots is fundamental to the successful delivery of a scientific finding. The best story is the one that can be told with figures o. Not surprising, making good figures is a demanding endeavor of the scientific process, and there are at least two steps to it. First, you need to decide on which type of figure best illustrates the point that you what to make. It is not about deceiving the reader, but rather use the most convincing available figure. Of course, each problem will have different needs, so you just need to be familiar about the different types of figures available, to better know which is the best figure for your own case problem. Figure 4.1: R plots R has several built-in functions to do all sorts of plots. You can even create your own types of plots. Some packages even allow you to create plots online, where people can interact with the data. Others let you animate the data. You can check a gallery of R plots here. Figure 4.2: Animated R plot Second, it is the issue of the standards of the figure. This relates to the editorial guidelines you need to follow to deliver your figure. Each scientific journal has different guidelines for figures. Some journals allow you to place multiple figures together, others like the letters to be of a given size and font type, other journals only like black and white, others want the figures on certain dimensions, etc. So you need to know the guidelines that are specific to the journal you want to publish on to ensure your figures are up to standard. If you are not publishing a paper, it will still be good for you to follow the guidelines of figure formatting for any journal, so you know your figures are up to the most professional standards required in the field. Regardless of the guidelines for the specific journal, it is important that your figure is clear enough to be understood. Here are some key conditions for any figure: Ensure that the axes have names. e.g. Human population. Ensure that between brackets the axes have units. e.g. Human population (Number of people) Ensure that your axes have tickmarks. Ensure all data are displayed. If you constraint the values shown in your axes. Be sure you do not remove data by accident. Ensure the lines of the axes are black color. At times the axes colors are grey. The problem with this setting is that when printed, such axes may not appear, depending on how good your printer is. Ensure the thickness of the axes is at least 1 point. At times the lines are thin, and this creates problems with printing as well. When possible use black and white for your figures. While color is very common, many people take photocopies of papers or reports and they are very common in black and white. So in those cases any color figure will have troubles. p Lets check how to do some of the most common types of plots in R. "],["scatterplots.html", "Scatterplots", " Scatterplots Scatterplots allow you to see patterns of variation between two variables. To create a plot in R, simply type plot(y~x). Lets say I want to plot the second and third column in a dataframe. #Lets create some dummy data DataFrame&lt;- data.frame( x1 = c(rep(1,250)), # in Column 1 I repeat the number 1 for 250 times x2 = seq(1:250), #Column 2 I create a sequence of numbers from 1 to 250 x3 = sample(seq(1:1000),250)) # select 250 random numbers between 1 and 10000 #Now lets plot columns 2 and 3 of that data plot(DataFrame[,2]~DataFrame[,3]) #You can also plot by column name using the $ sign as indicated earlier to call a column plot(DataFrame$x2~DataFrame$x3) Now it comes the different settings needed to format the figure. Almost any attribute of a figure in R can be formatted. Next, I will show you how to format a few parameters. Once you know how to format a given parameter of a figure, you should be able to format any other parameter. Obviously a figure has tens of parameters you can modify, so you should not expect to know them all by memory, but you should be able to know how to find the given parameter, which by know you know it is by asking your friend Google. Lets modify a few parameters from the figure above. For instance, what about the axis names? You can add axis names using the command xlab or ylab inside the plot command, like this: plot(DataFrame[,2]~DataFrame[,3],xlab=&quot;Years&quot;, ylab=&quot;Precipitation&quot;) What about the different type of symbols? Figure 4.3: R plot symbols R offers 25 different symbol types (Figure above), which you can call using the parameter pch, like this: plot(DataFrame[,2]~DataFrame[,3],xlab=&quot;Years&quot;, ylab=&quot;Precipitation&quot;, pch=22) Other characters can be used to specify pch including +, *,-,.,#, %, o. Or simply any character you put between the quotations () in the pch parameter. What about colors for those points?. That is controlled using the col parameter. Like this, plot(DataFrame[,2]~DataFrame[,3],xlab=&quot;Years&quot;, ylab=&quot;Precipitation&quot;, pch=22, col=&quot;red&quot;) For some symbols you can also control the filling color, using the bg parameter. Like this, plot(DataFrame[,2]~DataFrame[,3],xlab=&quot;Years&quot;, ylab=&quot;Precipitation&quot;, pch=22, col=&quot;red&quot;, bg=&quot;blue&quot;) You can also control the size of the symbols using the cex parameter. Like this, plot(DataFrame[,2]~DataFrame[,3],xlab=&quot;Years&quot;, ylab=&quot;Precipitation&quot;, pch=22, col=&quot;red&quot;, cex=2) Remember, there are tens of parameters you can modify in a plot. So you need to know exactly the standards required in the journal you want to publish to ensure you deliver the best figures required. "],["histograms.html", "Histograms", " Histograms Histograms are a very important type of plot as it lets you see the frequency in which certain values appear in your data. This type of plot is also call a frequency distribution. To create a histogram in R, you use the command hist(x), where x, is the vector of data you want to plot. Lets create a frequency distribution of the GDP (Gross Domestic Producto) of countries in the world, using the csv file we loaded earlier, #lets reload the data, just in case you have not loaded it GDPData=read.csv(&quot;https://raw.githubusercontent.com/Camilo-Mora/GEO380/main/Datasets/Countries_GDP.csv&quot;) head(GDPData) #now lets check the data ## country continent year gdpPercap ## 1 Afghanistan Asia 1952 779.4453 ## 2 Afghanistan Asia 1957 820.8530 ## 3 Afghanistan Asia 1962 853.1007 ## 4 Afghanistan Asia 1967 836.1971 ## 5 Afghanistan Asia 1972 739.9811 ## 6 Afghanistan Asia 1977 786.1134 hist(GDPData$gdpPercap) #now lets create a frequency of number of countries by GDP Just as with the scatterplot, you can improve the appearance of the figure. Lets start with the axis name. hist(GDPData$gdpPercap, xlab=&quot;GDP countries in USDollars&quot;) What about that title?. Not pretty, ah?. That is a default in R. To remove it, we set the main parameter to NULL, like this: hist(GDPData$gdpPercap, xlab=&quot;GDP countries in USDollars&quot;,main=NULL) Most journals do not allow you to put tittles in your plots. If you want to rather keep the tittle, but have a different tittle, you replace NULL with the title you want, like this: hist(GDPData$gdpPercap, xlab=&quot;GDP countries in USDollars&quot;,main=&quot;Countries of the World&quot;) "],["density-plots.html", "Density plots", " Density plots At times, when you use scatterplots with many data points, chances are that some points will overlap, and then create a misleading visual representation of the data as any overlapping data points will appear as a single point. A better representation of the data in this type of case is the use of density plots, in which the space of the entire plot is gridded into equal size cells, and the number of point overlapping on each cell counted and that is what is displayed. Lets do an example. #lets create a dummy dataset of many points # Create data x &lt;- rnorm(mean=1.5, 5000) y &lt;- rnorm(mean=1.6, 5000) #lets plot that data plot(y~x) From the figure above you can tell that it is hard to make sense of any pattern because many points overlap. One solution to this is to use a density plot. And there are different packages to do so. Here we will use the hexbin package. # Packages library(hexbin) library(RColorBrewer) #This library allows you to create color scales, we will see this later. ## Warning: package &#39;RColorBrewer&#39; was built under R version 4.0.3 # Make the plot bin&lt;-hexbin(x, y, xbins=40) #hexbin is the function to grid the points in the plot. You can use different number of grids. my_colors=colorRampPalette(rev(brewer.pal(11,&#39;Spectral&#39;))) #this is the color scale plot(bin, main=&quot;&quot; , colramp=my_colors , legend=F ) #now lets plot the hexbin/grid Now you can see the same data, but plotting the hexbin/grid. You can play with different setting of the hexbin package, by typing ?hexbin in the R console. You can also display both plots side by side using the par function. par(mar = c(4, 4, .1, .1)) plot(bin,colramp=my_colors) #hexbin plot plot(y~x) #Scatter plot "],["plotting-maps.html", "Plotting maps", " Plotting maps R also provides powerful tools to analyze geographical data. Pretty much anything you can do in ARCgis, you can do in R; the key difference is that in R is free!. Lets see how to plot a map in R. Lets start by getting some spatial data. I collected the global data on human population from here. That page is full of other types of global scale data you may find interesting. Here we will use the package raster for the purpose of loading and plotting the map. library (raster) GlobalPopulation=raster(&quot;https://raw.githubusercontent.com/Camilo-Mora/GEO380/main/Datasets/GlobalHumanPopulation2020.tif&quot;) #load the raster. In the code above, I create a variable called GlobalPopulation that has the global data on human population. Note that to load the data of the raster, you use the same method you used before to load the .csv file. That is, using the path the file, preceded by the command that reads the file. In this case, you use the command raster to read the file rather than read.csv. as the data you want to load is a raster and not a csv file. To plot the raster, all you have to do is to plot that variable, like this: plot (GlobalPopulation) You can use a different color scale using the RColorBrewer library. Lets try, library(RColorBrewer) #this library allows you to create your own scales #Lets create a color scale between yellow and red colors ColorScale &lt;- colorRampPalette(c(&quot;yellow&quot;,&quot;red&quot;)) plot(GlobalPopulation,col =ColorScale(100)) #plot human population with 100 color in my scale There are also premade color blind friendly scales. The most commonly used is called viridis. Here are the different options of scales it has to offer: Figure 4.4: Viridis color scales Lets now plot our map, using the magma scale library(viridis) ## Loading required package: viridisLite plot(GlobalPopulation,col =magma(1000)) #plot human population with 100 color in my scale Hmm, not to pretty ah?. why do you think the map does not look that good? Well, the reason is that there are some places in the world with soo many people that makes the rest of the world look by comparison like if the world was empty. Here the problem is the scale of comparison. In cases where the extremes of the data are to far a part, it is recommended to log transform your data, which brings some of those extremes closer. Lets see what log-transforming does, plot(log(GlobalPopulation),col =magma(1000)) #log transform human population Now you can better appreciate the patterns of variation, but you need to be mindful that the data are logarithmic. R also allows to reproject the data into different projection types. You should be aware that there are many issues with displaying maps in different projections, that is topic for another course. Raster &lt;- projectRaster(GlobalPopulation, crs=&#39;+proj=moll&#39;, over=T) #reproject raster to mollweide projection ## Warning in rgdal::rawTransform(projto_int, projfrom, nrow(xy), xy[, 1], : 55946 ## projected point(s) not finite plot(Raster) Hmm that raster of the worlds population is missing an outline of the world. For that, there is a package called maps. Lets try. library(maps) # this library offers several choices for background maps worldmap &lt;- map(&quot;world&quot;, plot=F,interior = F) #create map of the world plot(worldmap) #check the map Hmm that packages provides the outline of the world as points. But really we want lines. Ok, we can use the maptools to convert points to lines library(maptools) #library to convert points to lines ## Checking rgeos availability: TRUE worldmapLines &lt;- map2SpatialLines(worldmap, proj4string=CRS(&quot;+proj=longlat +datum=WGS84&quot;)) plot( worldmapLines) #check the map Great, now you have a raster of the worlds human population and an outline of the world. Lets put them together plot(GlobalPopulation) #first plot your raster plot(worldmapLines,add=T) #then add the outline of the world on top. Find out the command to remove the color scale shown in the map above. Tip: type How to remove color scale of plot raster in r "],["animated-plots.html", "Animated plots", " Animated plots What about animated plots?. If you recall the database on socio-economic data from countries in the world, you will notice that each variable was collected at different years. What year to display?. Well you can display them all and see how any pattern will change over time using an animated plot that displays each year sequentially. For animated plots, we will use the ggplot2 and the gganimate libraries/packages. i #first lets bring the data. ExpectancyData=read.csv(&quot;https://raw.githubusercontent.com/Camilo-Mora/GEO380/main/Datasets/Countries_LifeExpectancy.csv&quot;) GDPData=read.csv(&quot;https://raw.githubusercontent.com/Camilo-Mora/GEO380/main/Datasets/Countries_GDP.csv&quot;) #lets merge those two databases, using the dplyr packaged that we used earlier. library(dplyr) #load package to merge database #merge the databases MergeData &lt;- full_join(GDPData, ExpectancyData, by = c(&quot;country&quot;,&quot;year&quot;)) As it is customary, lets check the data were loaded and display correctly. tail (MergeData) ## country continent.x year gdpPercap X continent.y lifeExp ## 1699 Zimbabwe Africa 1982 788.8550 1699 Africa 60.363 ## 1700 Zimbabwe Africa 1987 706.1573 1700 Africa 62.351 ## 1701 Zimbabwe Africa 1992 693.4208 1701 Africa 60.377 ## 1702 Zimbabwe Africa 1997 792.4500 1702 Africa 46.809 ## 1703 Zimbabwe Africa 2002 672.0386 1703 Africa 39.989 ## 1704 Zimbabwe Africa 2007 469.7093 1704 Africa 43.487 It seems data were loaded fine. The three variables of interest here are gdpPercap (GDP per capita), lifeExp (life expectancy), year and continent. (note that continent is double, because that column was on each of the dataset we merged, and we did not specific to do the merging by continent as well). Lets create an animated plot of that data. Since the code needed will require several lines, it is recommended that you create the code in Tinn-R firts. Once it is done, copy and paste in the R console. # for the figures we will need library(ggplot2) #this package is to do all sorts of plots library(gganimate) #this package does the animation # Make a ggplot, but add frame=year: one image per year ggplot(MergeData, aes(gdpPercap, lifeExp, color = continent.x)) + geom_point() + scale_x_log10() + theme_bw() + # gganimate specific bits: labs(title = &#39;Year: {frame_time}&#39;, x = &#39;GDP per capita&#39;, y = &#39;life expectancy&#39;) + transition_time(year) + ease_aes(&#39;linear&#39;) # Save at gif: anim_save(&quot;AnimatedPlot.gif&quot;) The code above generate the plot below, which should now appear in your working folder. You can find out your working directory by typing getwd() in your R console. You can also set the working folder to a different path using the setwd(); in between brakets you put the path to the folder you want R to deposit any result from your codes. For instance, setwd(D:/GEOG380), sets my working directory to a folder called GEOG380 in my D harddrive. Figure 4.5: Animated R plot "],["saving-plots.html", "Saving plots", " Saving plots Of course, if you do a plot in R is because you want to use it somewhere else. The quick and very dirty way to get a figure from R is to use the simple PrintScreen in your keyboard, which will create a figure of whatever you have in your screen at the moment. You can then right click on any software, like Paint, Word, PowerPoint, etc. and click Paste to display the figure. Of course, R offers a large suite of formats to save plots. Here we will save the figures as a PDF using the function pdf. Basically, the function pdf requires you to write the name you want for your file (e.g. RPlot.pdf), how big you want the plot, the size of the letters, and few other options. Type ?pdf to see additional settings. The way to save any figure in R is like this: Firsts, you write the line of code indicating the type of file you want to save as. That creates a clean sheet, where you can place your plot or plots. Once done with your figure or figures, you need a line of code called dev.off(); that closes the sheet and save the file. Lets try, pdf(&quot;RPlot.pdf&quot;, width = 3, height = 3,pointsize=8,paper=&quot;letter&quot;) plot(bin,colramp=my_colors) #hexbin plot dev.off() If you now check your working folder, there should be a file called RPlot.pdf, which has the figure you just created. Of course, you can edit the figure as you like, as we showed in the Scatterplot section. The benefit of l saving files as PDF is that the resolution is never affected. You can zoom in into a PDF file and the resolution is always the same. In turn, other types of figures like jpeg, gif, png, etc. you need to define the resolution in advance, and if you zoom in into those type of figure formats you will notice the pixelation. Figure 4.6: Pixelation effect of figure format "],["excersice.html", "Excersice", " Excersice Now that you know how to manipulate data and do some basic figures. For this chapters exercise, please find the guidelines for figures in the journal Nature and do a plot according to the standards required for that journal. Plot the relationship between GDP and population size, using the databases that have been provided to you already, and include of the basic criteria for figures mentioned at the start of this chapter. "]]
